Week5 : Day 9
=============
ðŸ“Œ Alerts/Dialogs
=> we have to handle alert to proceed with the 
further actions on the page
=> all alerts are from the application which is written in the JS
=> We cannot inspect the alert

Types of Alerts:
1. Modal dialog ==> all these modal dialogs are not inspecable
 1.1. Simple alert ==> We have only action we can perform eg, message and 'ok' button.
 1.2. Confirm alert
   => We have a message along with action of 'Ok' and 'Cancel' 
   => We can either accept or decline it
 1.3. prompt alert
   => We have a message with textbox along with 'ok' & 'cancel' option.
   => Enter the input and accept it.
   => or we can cancel it.
 1.4. beforeUnload alert
   => a message + leave/Stay
   => Accept or dismiss the alert
2. Non-modal dialog
 2.1. sweet alert: 
  => Can be inspected
  => even if it inspected, we have to handle it to proceed with the further 
      action to perfomr in the webpage.

Methods to interat with dialog
1. accept("<string>") : to accept the dialog
2. dismiss() : to cancel the alert
3. message() : returns the message displayed in the dialog
4. type() : returns the what type of alert it is?
    if(dialog.type() === "confirm"){
    dialog.accept();
    }
5. defaultValue() : retrn the default value present in prompt dialog
     
ðŸ“Œ iFrames : 
    Frames are a section where we can embed some other photos or location or videos 
      or banners or ads we can used to display on the web page
      **Inline Frame also called iframe in web page
      **HTML page(iframe) embeded into the main HTML page.
      **Support multimedia contents - videos, ad, weather, location

Methods to access iframe:
 1. By Id
 2. By URL
 3. By index

=> page.frame 
    ==> Simple and straignt forward scenarios
=> page.frameLocator  
    ==> for complex scenarios/Nested Frames
    ==> Support chaining operations
        page.framelocator("frame1").("frame2").click()
    

 
ðŸ“ŒFor Of loop
===============
   for(let element of elements){
   }

ðŸ“ŒNon-null assertion operator
=============================
frame!.click("")

===============
Week5 : Day 10
===============
ðŸ“Œ Multiple Windows/Tabs
    Windows Handling / Switching between the tabs
    Approches:
    *********
  1. Const context1 = await browser.newContext();
     const page1 = context1.newPage();
                  (and)
     Const context2 = await browser.newContext();
     const page2 = context2.newPage();
  2. page.on('popup')
  3. context.waitforEvent("page")
    3.1. Sequential approach
      => create a prmise in ur code to tell that this will resolve into a 
      new page
        * const windowPromise = context.waitforEvent("page");
      => Now perform the useraction which is suppose to open new window
        * await page.locator("").click()
      => Now wait for the promise to get completed ( for the promise you created in 
        step 1)
        * const window = await windowPromise
      => Switch to the new windoe for performing further action
        * window.bringToFront()
    3.2. Concurrent/Parallel approach
      => We have multiple promises , once all the promises were resolved it
          resulted with single promise.
          syntax : await Promise.all( [promise1, promise2])
          eg: For multiple window handling
          [nw1,nw2,nw3] = await Promise.all([
          context.waitForEvent("page"),
          context.waitForEvent("page"),
          context.waitForEvent("page"),
          page.click("#Open")
          ])

ðŸ“Œ For Each statement : 

ðŸ“Œ Multiple windows handling : 

ðŸ“Œ File Upload:
***************
 1. SetInputFiles : Bypass the user interaction
    => If we have a type as 'file' on the DOM, we can use setInputFile method
    => Whe user wants to upload multiple file , we have a attribute called 'multiple accept'
    by using it we can upload muliple files like (photo, video, file,ddoc, mp4)
 2. FileChooser : Dynamic & user mimic the user action
      => If there is no file attribute or dynamic applciation then go with 
         chooser
      => 

ðŸ“Œ File Download :
****************

ðŸ“Œ Reading Data from (.env file, .json file, .csv files) 
ðŸ“Œ Shadow DOM




